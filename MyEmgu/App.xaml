<Application x:Class="MyEmgu.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
             xmlns:local="clr-namespace:MyEmgu"
             StartupUri="MainWindow.xaml">

    <Application.Resources>


        <SolidColorBrush x:Key="MainColor" Color="#CC285A8C" />
        <SolidColorBrush x:Key="TextColor" Color="White" />
        <SolidColorBrush x:Key="MainGridColor" Color="White" />


        <!--<SolidColorBrush x:Key="MainColor" Color="#285A8C"  ></SolidColorBrush>-->

        <SolidColorBrush x:Key="textboxErrorForeColor" Color="Red" />

        <SolidColorBrush x:Key="textboxChangedForeColor" Color="Green" />

        <local:ListBoxLeftWidthConverter x:Key="ListBoxLeftWidthConverter" />

        <local:ListBoxRightWidthConverter x:Key="ListBoxRightWidthConverter" />

        <DataTemplate x:Key="InfoListTemplate">
            <Grid Height="25" Margin="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="{Binding ElementName=listBoxDetail, Path=ActualWidth, Converter={StaticResource ListBoxLeftWidthConverter}}" />
                    <ColumnDefinition Width="{Binding ElementName=listBoxDetail, Path=ActualWidth, Converter={StaticResource ListBoxRightWidthConverter}}" />
                </Grid.ColumnDefinitions>
                <TextBlock Margin="5,0,0,0"
                                           VerticalAlignment="Center"
                                           Text="{Binding DetailContent}" />
                <Border BorderBrush="{DynamicResource MainColor}" BorderThickness="0,0,1,1" Margin="0,-4,0,0" />

                <TextBlock Grid.Column="1"
                                           Margin="0,0,5,2"
                                           HorizontalAlignment="Right"
                                           VerticalAlignment="Center"
                                           Foreground="{Binding ContentBrush}"
                                           Text="{Binding DetailData}" />

                <Border Grid.Column="0"
                                        Margin="-20,0,-2000,0"
                                        BorderBrush="{DynamicResource MainColor}"
                                        BorderThickness="0,0,0,1" />
            </Grid>
        </DataTemplate>


        <!--#region Listbox 的样式-->
        <!--  ListBox *********************************************************************************************************************************************************  -->

        <!--  Simple Repeat Button - This is used by Simple ScrollBar for the up and down buttons  -->
        <Style x:Key="SimpleRepeatButtonTop"
               BasedOn="{x:Null}"
               TargetType="{x:Type RepeatButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Grid Width="10" Margin="1,0,0,0">
                            <Border x:Name="Border"
                                    Background="Transparent"
                                    BorderBrush="Transparent"
                                    BorderThickness="0" />
                            <Grid Margin="0,9,0,-3">
                                <Path x:Name="DecreaseArrow"
                                      Data="M 1 4 L 7 4 L 4 -2 Z"
                                      Fill="Transparent"
                                      Stroke="#991F79B8"
                                      StrokeThickness="2" />
                            </Grid>
                        </Grid>
                        <ControlTemplate.Triggers>

                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="DecreaseArrow" Property="Fill" Value="#bb1F79B8" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="DecreaseArrow" Property="Fill" Value="#FF1F79B8" />
                                <!--<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border" />-->
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--  Simple Repeat Button - This is used by Simple ScrollBar for the up and down buttons  -->
        <Style x:Key="SimpleRepeatButtonBottom"
               BasedOn="{x:Null}"
               TargetType="{x:Type RepeatButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Grid Width="10" Margin="0,2,0,0">
                            <Border x:Name="Border"
                                    Background="Transparent"
                                    BorderBrush="Transparent"
                                    BorderThickness="0" />
                            <Grid Margin="1,4.5,0,0">
                                <Path x:Name="IncreaseArrow"
                                      Margin="0,-1.5,0,1.5"
                                      Data="M 1 0 L 4 6 L 7 0 Z"
                                      Stroke="#991F79B8"
                                      StrokeThickness="2" />
                            </Grid>
                        </Grid>
                        <ControlTemplate.Triggers>

                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="IncreaseArrow" Property="Fill" Value="#bb1F79B8" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="IncreaseArrow" Property="Fill" Value="#FF1F79B8" />
                                <!--<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border" />-->
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--  Simple Thumb - The Thumb is the draggable part of the Scrollbar  -->
        <Style x:Key="SimpleThumbStyle"
               BasedOn="{x:Null}"
               TargetType="{x:Type Thumb}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Grid x:Name="Grid"
                              Width="8"
                              Margin="0,0,0,0">
                            <Rectangle x:Name="Rectangle"
                                       Width="Auto"
                                       Height="Auto"
                                       HorizontalAlignment="Stretch"
                                       VerticalAlignment="Stretch"
                                       Fill="#991F79B8"
                                       RadiusX="1"
                                       RadiusY="1" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="True" />
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Rectangle" Property="Fill" Value="#bb1F79B8" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False" />
                            <Trigger Property="IsDragging" Value="True">
                                <Setter TargetName="Rectangle" Property="Fill" Value="#FF1F79B8" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--  Simple ScrollRepeatButton Style - This RepeatButton is used above and below the Thumb in the Scrollbar. They are set to transparent si that they do not show over the scrollbar  -->
        <Style x:Key="SimpleScrollRepeatButtonStyle" TargetType="{x:Type RepeatButton}">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="IsTabStop" Value="false" />
            <Setter Property="Focusable" Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Grid>
                            <Rectangle Fill="{TemplateBinding Background}"
                                       Stroke="{TemplateBinding BorderBrush}"
                                       StrokeThickness="{TemplateBinding BorderThickness}" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--  Simple ScrollBar  This makes use of SimpleThumb, SimpleRepeatButton and SimpleScrollRepeatButton  -->

        <Style x:Key="SimpleScrollBar" TargetType="{x:Type ScrollBar}">
            <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                        <Grid x:Name="GridRoot"
                              Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                              Margin="1.5,0,0,0"
                              Background="Transparent">
                            <Grid.RowDefinitions>
                                <RowDefinition MaxHeight="18" />
                                <RowDefinition Height="0.00001*" />
                                <RowDefinition MaxHeight="18" />
                            </Grid.RowDefinitions>

                            <Border Grid.RowSpan="10"
                                    BorderBrush="LightBlue"
                                    BorderThickness="1,0,0,0" />

                            <RepeatButton x:Name="DecreaseRepeat"
                                          Command="ScrollBar.LineUpCommand"
                                          Style="{DynamicResource SimpleRepeatButtonTop}" />

                            <!--  Track is a special layout container which sizes the thumb and the repeat button which do jump scrolling either side of it  -->
                            <Track x:Name="PART_Track"
                                   Grid.Row="1"
                                   IsDirectionReversed="true"
                                   Orientation="Vertical">
                                <Track.Thumb>
                                    <Thumb Style="{DynamicResource SimpleThumbStyle}" />
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton x:Name="PageUp"
                                                  Command="ScrollBar.PageDownCommand"
                                                  Style="{DynamicResource SimpleScrollRepeatButtonStyle}" />
                                </Track.IncreaseRepeatButton>
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton x:Name="PageDown"
                                                  Command="ScrollBar.PageUpCommand"
                                                  Style="{DynamicResource SimpleScrollRepeatButtonStyle}" />
                                </Track.DecreaseRepeatButton>
                            </Track>

                            <RepeatButton x:Name="IncreaseRepeat"
                                          Grid.Row="2"
                                          Command="ScrollBar.LineDownCommand"
                                          Style="{DynamicResource SimpleRepeatButtonBottom}" />
                        </Grid>

                        <!--
                            This uses a single template for ScrollBar and rotate it to be Horizontal
                            It also changes the commands so that the it does Left and Right instead of Up and Down Commands
                        -->
                        <ControlTemplate.Triggers>
                            <Trigger Property="Orientation" Value="Horizontal">

                                <!--  Rotate the ScrollBar from Vertical to Horizontal  -->
                                <Setter TargetName="GridRoot" Property="LayoutTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90" />
                                    </Setter.Value>
                                </Setter>

                                <!--  Track is bound to Orientation internally, so we need to rotate it back to Vertical  -->
                                <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical" />

                                <!--  Change the commands to do Horizontal commands  -->
                                <Setter TargetName="DecreaseRepeat" Property="Command" Value="ScrollBar.LineLeftCommand" />
                                <Setter TargetName="IncreaseRepeat" Property="Command" Value="ScrollBar.LineRightCommand" />
                                <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                                <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--
            Simple ScrollViewer
            ScrollViewer is a Grid control which has a ContentPresenter and a Horizontal and Vertical ScrollBar
            It is used by ListBox, MenuItem, ComboBox, and TreeView
        -->

        <Style x:Key="SimpleScrollViewer"
               BasedOn="{x:Null}"
               TargetType="{x:Type ScrollViewer}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                        <Grid Background="{TemplateBinding Background}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ScrollContentPresenter Grid.Row="0"
                                                    Grid.Column="0"
                                                    Margin="{TemplateBinding Padding}"
                                                    CanContentScroll="{TemplateBinding CanContentScroll}"
                                                    Content="{TemplateBinding Content}"
                                                    ContentTemplate="{TemplateBinding ContentTemplate}" />
                            <ScrollBar x:Name="PART_VerticalScrollBar"
                                       Grid.Row="0"
                                       Grid.Column="1"
                                       Maximum="{TemplateBinding ScrollableHeight}"
                                       Minimum="0"
                                       Orientation="Vertical"
                                       Style="{DynamicResource SimpleScrollBar}"
                                       ViewportSize="{TemplateBinding ViewportHeight}"
                                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                       Value="{Binding VerticalOffset,
                                                       Mode=OneWay,
                                                       RelativeSource={RelativeSource TemplatedParent}}" />

                            <!--  The visibility of the ScrollBars is controlled by the implementation fo the control  -->
                            <ScrollBar x:Name="PART_HorizontalScrollBar"
                                       Grid.Row="1"
                                       Grid.Column="0"
                                       Maximum="{TemplateBinding ScrollableWidth}"
                                       Minimum="0"
                                       Orientation="Horizontal"
                                       Style="{DynamicResource SimpleScrollBar}"
                                       ViewportSize="{TemplateBinding ViewportWidth}"
                                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                       Value="{Binding HorizontalOffset,
                                                       Mode=OneWay,
                                                       RelativeSource={RelativeSource TemplatedParent}}" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--  Simple ListBoxItem - This is used for each Item in a ListBox. The item's content is placed in the ContentPresenter  -->

        <Style TargetType="{x:Type ListBoxItem}">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="IsTabStop" Value="False" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                        <Grid SnapsToDevicePixels="true">
                            <Border x:Name="Border"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}" />
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>
                        <ControlTemplate.Triggers>

                            <!--  Change IsSelected SelectedBackgroundBrush to set the selection color for the items  -->
                            <!--<Trigger Property="IsSelected" Value="true">
                                <Setter Property="Background" Value="{DynamicResource SelectedBackgroundBrush}" TargetName="Border" />
                            </Trigger>-->

                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--  Simple ListBox - This uses SimpleScrollViewer to allow items to be scrolled and SimpleListBoxItem to define the look of each item  -->
        <Style x:Key="SimpleListBox" TargetType="{x:Type ListBox}">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBox}">
                        <Grid>
                            <Border x:Name="Border"
                                    BorderBrush="{DynamicResource MainColor}"
                                    BorderThickness="2" />
                            <ScrollViewer Margin="1"
                                          Focusable="false"
                                          Style="{DynamicResource SimpleScrollViewer}">

                                <!--  The StackPanel is used to display the children by setting IsItemsHost to be Trus  -->
                                <StackPanel Margin="2" IsItemsHost="true" />
                            </ScrollViewer>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="Border" Property="Opacity" Value="0.5" />
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--#endregion-->


        <!--#region expander-->

        <Style x:Key="ExpanderHeaderFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Border>
                            <Rectangle Margin="0"
                                       SnapsToDevicePixels="true"
                                       Stroke="Black"
                                       StrokeDashArray="1 2"
                                       StrokeThickness="1" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Padding="{TemplateBinding Padding}">
                            <Grid Background="Transparent" SnapsToDevicePixels="False">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="19" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <Ellipse x:Name="circle"
                                         Width="19"
                                         Height="19"
                                         HorizontalAlignment="Center"
                                         VerticalAlignment="Center"
                                         Stroke="#991F79B8" />
                                <Path x:Name="arrow"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Data="M 2.5,0.5 L 6.5,5 L 1.8,8.2"
                                      RenderTransformOrigin="0.5,0.5"
                                      SnapsToDevicePixels="false"
                                      Stroke="#dc1F79B8"
                                      StrokeThickness="2">
                                    <Path.LayoutTransform>
                                        <RotateTransform Angle="0" />
                                    </Path.LayoutTransform>
                                </Path>
                                <ContentPresenter Grid.Column="1"
                                                  Margin="4,0,0,0"
                                                  HorizontalAlignment="Left"
                                                  VerticalAlignment="Center"
                                                  RecognizesAccessKey="True"
                                                  SnapsToDevicePixels="True" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter TargetName="arrow" Property="Data" Value="M 1,1.5 L 4.5,5 L 8,1.5" />
                                <Setter TargetName="arrow" Property="RotateTransform.Angle" Value="0" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="circle" Property="Stroke" Value="#FF1F79B8" />
                                <Setter TargetName="arrow" Property="Stroke" Value="#FF1F79B8" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="circle" Property="Stroke" Value="#ee1F79B8" />
                                <Setter TargetName="circle" Property="StrokeThickness" Value="2" />
                                <Setter TargetName="arrow" Property="Stroke" Value="#ff1F79B8" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="VerticalContentAlignment" Value="Stretch" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Expander}">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3"
                                SnapsToDevicePixels="true">
                            <DockPanel>
                                <ToggleButton x:Name="HeaderSite"
                                              MinWidth="0"
                                              MinHeight="0"
                                              Margin="1"
                                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Content="{TemplateBinding Header}"
                                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                                              ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                              DockPanel.Dock="Top"
                                              FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}"
                                              FontFamily="{TemplateBinding FontFamily}"
                                              FontSize="{TemplateBinding FontSize}"
                                              FontStretch="{TemplateBinding FontStretch}"
                                              FontStyle="{TemplateBinding FontStyle}"
                                              FontWeight="{TemplateBinding FontWeight}"
                                              Foreground="{TemplateBinding Foreground}"
                                              IsChecked="{Binding IsExpanded,
                                                                  Mode=TwoWay,
                                                                  RelativeSource={RelativeSource TemplatedParent}}"
                                              IsTabStop="False"
                                              Padding="{TemplateBinding Padding}"
                                              Style="{StaticResource ExpanderDownHeaderStyle}" />
                                <ContentPresenter x:Name="ExpandSite"
                                                  Margin="{TemplateBinding Padding}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  DockPanel.Dock="Bottom"
                                                  Focusable="false"
                                                  Visibility="Collapsed" />
                            </DockPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="true">
                                <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible" />
                            </Trigger>

                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--#endregion-->


        <!--#region TabControl 的样式-->

        <Style x:Key="SimpleTabControl" TargetType="{x:Type TabControl}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabControl}">
                        <Grid KeyboardNavigation.TabNavigation="Local">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>

                            <!--
                                TabPanel is a layout container which allows the TabItems to wrap and re-order when selected
                                The implementation knows to use this control because it is marked IsItemsHost = True
                            -->

                            <TabPanel x:Name="HeaderPanel"
                                      Grid.Row="0"
                                      Margin="0,0,0,0"
                                      Panel.ZIndex="1"
                                      Background="Transparent"
                                      IsItemsHost="True"
                                      KeyboardNavigation.TabIndex="1" />

                            <Border x:Name="Border"
                                    Grid.Row="1"
                                    Background="White"
                                    BorderBrush="White"
                                    BorderThickness="1"
                                    CornerRadius="5"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    KeyboardNavigation.TabIndex="2"
                                    KeyboardNavigation.TabNavigation="Local">

                                <!--  The implementation switches the content. This control must be named PART_SelectedContentHost  -->
                                <ContentPresenter x:Name="PART_SelectedContentHost"
                                                  Margin="4"
                                                  ContentSource="SelectedContent" />
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--  Simple TabItem  -->
        <Style TargetType="{x:Type TabItem}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabItem}">
                        <Grid Margin="0,0,5,5">

                            <Path Name="Path"
                                  Margin="0 0 0 -4"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Stretch"
                                  ClipToBounds="true"
                                  Data="M0,0 L0,10 z"
                                  RenderTransformOrigin="0.5,0.5"
                                  Stretch="Fill"
                                  Stroke="White"
                                  StrokeThickness="6"
                                  Visibility="Collapsed" />

                            <Border x:Name="Border"
                                    Height="27"
                                    Margin="0,0,0,0"
                                    Background="White"
                                    BorderBrush="{DynamicResource MainColor}"
                                    BorderThickness="1,1,1,1"
                                    CornerRadius="4">
                                <ContentPresenter x:Name="ContentSite"
                                                  Margin="12,2,12,2"
                                                  HorizontalAlignment="Center"
                                                  VerticalAlignment="Center"
                                                  ContentSource="Header"
                                                  RecognizesAccessKey="True" />
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Panel.ZIndex" Value="100" />
                                <Setter TargetName="ContentSite" Property="TextBlock.Foreground" Value="White" />
                                <Setter TargetName="Border" Property="Background" Value="#FF1CA1B6" />
                                <Setter TargetName="Path" Property="Visibility" Value="Visible" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--#endregion-->


        <Style TargetType="{x:Type Button}">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="ButtonBorder"
                                Background="{DynamicResource MainColor}"
                                BorderBrush="#dd000000"
                                BorderThickness="1">
                            <ContentPresenter Name="content"
                                              Margin="1"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Center"
                                              TextBlock.Foreground="White" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="ButtonBorder" Property="Opacity" Value="0.6" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="#cc000000" />
                                <Setter TargetName="ButtonBorder" Property="BorderThickness" Value="2,2,2,2" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="#cc000000" />
                                <Setter TargetName="ButtonBorder" Property="BorderThickness" Value="2,2,2,2" />
                                <Setter TargetName="content" Property="Margin" Value="1,2,0,0" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <!--  Simple MenuItem - The template uses triggers to provide four different arrangements of menu item which are set via the Role property  -->
        <Style x:Key="LeftToRight_MenuItem"  TargetType="{x:Type MenuItem}">
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="FlowDirection" Value="LeftToRight"  />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type MenuItem}">

                        <Border>

                            <Grid Name="MainGrid" Height="27" Background="{DynamicResource MainColor}">

                                <!--  The Grid is used to hold together columns for an Icon, Content, Glyph checkmark and Arrow to show the next level Size sharing is used in Grid so that the Icon, Content, Arrow for each MenuItem align together  -->

                                <Grid.ColumnDefinitions>

                                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />

                                    <ColumnDefinition x:Name="CheckWidth"
                                                      Width="25"
                                                      SharedSizeGroup="MenuItemIconColumnGroup" />

                                    <ColumnDefinition Width="*" />

                                    <ColumnDefinition Width="20" />

                                </Grid.ColumnDefinitions>

                                <Border x:Name="Border"
                                        Grid.ColumnSpan="10"
                                        BorderThickness="1"
                                        Opacity="1" />

                                <!--  The Popup is the body of the menu which expands down or across depending on the level of the item  -->
                                <Popup x:Name="SubMenuPopup"
                                       AllowsTransparency="true"
                                       Focusable="false"
                                       IsOpen="{Binding IsSubmenuOpen,
                                                        RelativeSource={RelativeSource TemplatedParent}}"
                                       Placement="Bottom"
                                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                    <Grid x:Name="SubMenu" Background="Transparent">
                                        <Grid.Effect>
                                            <DropShadowEffect Opacity="0.5" Direction="315" ShadowDepth="0" />
                                        </Grid.Effect>

                                        <Border x:Name="SubMenuBorder" Margin="0,1,5,5"
                                                
                                                BorderBrush="{DynamicResource TextColor}"
                                                BorderThickness="1">
                                            <Border.Effect>
                                                <DropShadowEffect Opacity="0.4" />
                                            </Border.Effect>
                                            <StackPanel IsItemsHost="True"
                                                    Background="Transparent"
                                                    KeyboardNavigation.DirectionalNavigation="Cycle" />
                                        </Border>

                                        <!--  StackPanel holds children of the menu. This is set bu IsItemsHost=True  -->

                                    </Grid>
                                </Popup>

                                <!--  Arrow drawn path which points to the next level of the menu 箭头  -->
                                <Grid x:Name="ArrowPanel"
                                      Grid.Column="3"
                                      Margin="6,0,8,0"
                                      VerticalAlignment="Center">
                                    <Path x:Name="ArrowPanelPath"
                                          VerticalAlignment="Center"
                                          Data="M0,0 L0,8 L4,4 z"
                                          Fill="{DynamicResource TextColor}"
                                          RenderTransformOrigin="0.5,0.5">
                                    </Path>
                                </Grid>

                                <!--  Content for the menu text etc   文本  -->
                                <ContentPresenter x:Name="HeaderHost"
                                                  Grid.Column="2"
                                                  Margin="{TemplateBinding Padding}"
                                                  HorizontalAlignment="Left"
                                                  VerticalAlignment="Center"
                                                  ContentSource="Header"
                                                  RecognizesAccessKey="True"
                                                  TextBlock.Foreground="{DynamicResource TextColor}" />

                                <!--  子菜单  -->
                                <!--  ContentPresenter to show an Icon if needed  -->
                                <ContentPresenter x:Name="Icon"
                                                  Grid.Column="0"
                                                  Margin="4,0,6,0"
                                                  VerticalAlignment="Center"
                                                  ContentSource="Icon" />

                                <!--  Glyph is a checkmark if needed for a checkable menu   可选  -->
                                <Grid x:Name="GlyphPanel"
                                      Grid.Column="1"
                                      Margin="9,0,9,0"
                                      VerticalAlignment="Center"
                                      Visibility="Collapsed">
                                    <Path x:Name="GlyphPanelpath"
                                          VerticalAlignment="Center"
                                          Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z"
                                          Fill="{DynamicResource TextColor}"
                                          FlowDirection="RightToLeft"
                                          RenderTransformOrigin="0.5,0.5">
                                        <Path.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform ScaleX="-1.44" ScaleY="1.44" />
                                                <SkewTransform AngleX="0" AngleY="0" />
                                                <RotateTransform Angle="0" />
                                                <TranslateTransform />
                                            </TransformGroup>
                                        </Path.RenderTransform>
                                    </Path>
                                </Grid>

                            </Grid>
                        </Border>

                        <!--  These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role  -->
                        <ControlTemplate.Triggers>

                            <!--  Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down  -->
                            <Trigger Property="Role" Value="TopLevelHeader">
                                <Setter Property="Margin" Value="0,1,0,1" />
                                <Setter Property="Padding" Value="0,0,5,0" />
                                <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                                <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed" />
                                <Setter Property="Background" Value="Transparent" TargetName="MainGrid"/>
                                <Setter Property="Tag" Value="true"></Setter>
                            </Trigger>

                            <!--  Role = TopLevelItem :  this is a child menu item from the top level without any child items  -->
                            <Trigger Property="Role" Value="TopLevelItem">
                                <Setter Property="Margin" Value="0,1,0,1" />
                                <Setter Property="Padding" Value="0,0,5,0" />
                                <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed" />
                                <Setter Property="Background" Value="Transparent" TargetName="MainGrid"/>
                                <Setter Property="Tag" Value="true"></Setter>
                            </Trigger>

                            <!--  Role = SubMenuHeader : this is a child menu item which does not have children  -->
                            <Trigger Property="Role" Value="SubmenuHeader">
                                <Setter Property="DockPanel.Dock" Value="Top" />
                                <Setter Property="Padding" Value="0,2,0,2" />
                                <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                                <Setter TargetName="SubMenuPopup" Property="Placement" Value="Right" />
                                <Setter TargetName="SubMenuPopup" Property="HorizontalOffset" Value="-2" />
                                <Setter TargetName="CheckWidth" Property="Width" Value="25" />
                            </Trigger>

                            <!--  Role = SubMenuItem : this is a child menu item which has children  -->
                            <Trigger Property="Role" Value="SubmenuItem">
                                <Setter Property="DockPanel.Dock" Value="Top" />
                                <Setter Property="Padding" Value="0,2,0,2" />
                                <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed" />
                                <Setter TargetName="CheckWidth" Property="Width" Value="25" />
                            </Trigger>


                            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                                <Setter TargetName="SubMenuPopup" Property="PopupAnimation" Value="None" />
                            </Trigger>

                            <!--  If no Icon is present the we collapse the Icon Content  -->
                            <Trigger Property="Icon" Value="{x:Null}">
                                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                            </Trigger>

                            <!--  The GlyphPanel contains the CheckMark  -->
                            <Trigger Property="IsChecked" Value="true">
                                <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                            </Trigger>

                            <Trigger SourceName="SubMenuPopup" Property="AllowsTransparency" Value="true">
                                <Setter TargetName="SubMenu" Property="Margin" Value="0,3,0,0" />
                                <Setter TargetName="SubMenu" Property="SnapsToDevicePixels" Value="true" />

                            </Trigger>

                            <Trigger Property="IsMouseOver" Value="true">
                                <!--<Setter TargetName="SubMenuPopup" Property="IsOpen" Value="true" />-->
                            </Trigger>

                            <!--  Using the system colors for the Menu Highlight and IsEnabled  -->
                            <Trigger Property="IsHighlighted" Value="true">
                                <Setter TargetName="GlyphPanelpath" Property="Fill" Value="{DynamicResource MainColor}" />
                                <Setter TargetName="ArrowPanelPath" Property="Fill" Value="{DynamicResource MainColor}" />
                                <Setter TargetName="HeaderHost" Property="TextBlock.Foreground" Value="{DynamicResource MainColor}" />
                                <Setter TargetName="Border" Property="Opacity" Value="0.7" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="white" />
                                <Setter TargetName="Border" Property="Background" Value="white" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" Value="0.5" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        
        <!--  Simple MenuItem - The template uses triggers to provide four different arrangements of menu item which are set via the Role property  -->
        <Style x:Key="RightToLeft_MenuItem"  TargetType="{x:Type MenuItem}">
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="FlowDirection" Value="RightToLeft" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type MenuItem}">

                        <Border>

                            <Grid Name="MainGrid" Height="27" Background="{DynamicResource MainColor}">

                                <!--  The Grid is used to hold together columns for an Icon, Content, Glyph checkmark and Arrow to show the next level Size sharing is used in Grid so that the Icon, Content, Arrow for each MenuItem align together  -->

                                <Grid.ColumnDefinitions>

                                    <ColumnDefinition Width="20" />
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition x:Name="CheckWidth"
                                                      Width="16"
                                                      SharedSizeGroup="MenuItemIconColumnGroup" />

                                </Grid.ColumnDefinitions>

                                <Border x:Name="Border"
                                        Grid.ColumnSpan="10"
                                        BorderThickness="1"
                                        Opacity="1" />

                                <!--  The Popup is the body of the menu which expands down or across depending on the level of the item  -->
                                <Popup x:Name="SubMenuPopup"
                                       AllowsTransparency="true"
                                       Focusable="false"
                                       IsOpen="{Binding IsSubmenuOpen,
                                                        RelativeSource={RelativeSource TemplatedParent}}"
                                       Placement="Bottom"
                                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                    <Grid x:Name="SubMenu" Background="Transparent">
                                        <Grid.Effect>
                                            <DropShadowEffect Opacity="0.5" Direction="225" />
                                        </Grid.Effect>

                                        <Border x:Name="SubMenuBorder" Margin="5,1,0,5"
                                                
                                                BorderBrush="{DynamicResource TextColor}"
                                                BorderThickness="1">
                                            <Border.Effect>
                                                <DropShadowEffect Opacity="0.4" />
                                            </Border.Effect>
                                            <StackPanel IsItemsHost="True"
                                                    Background="Transparent"
                                                    KeyboardNavigation.DirectionalNavigation="Cycle" />
                                        </Border>

                                        <!--  StackPanel holds children of the menu. This is set bu IsItemsHost=True  -->

                                    </Grid>
                                </Popup>

                                <!--  Arrow drawn path which points to the next level of the menu 箭头  -->
                                <Grid x:Name="ArrowPanel"
                                      Grid.Column="0"
                                      Margin="6,0,8,0"
                                      VerticalAlignment="Center">
                                    <Path x:Name="ArrowPanelPath"
                                          VerticalAlignment="Center"
                                          Data="M0,0 L0,8 L4,4 z"
                                          Fill="{DynamicResource TextColor}"
                                          RenderTransformOrigin="0.5,0.5">
                                        <Path.RenderTransform>
                                            <ScaleTransform ScaleX="-1" ScaleY="1" />
                                        </Path.RenderTransform>
                                    </Path>
                                </Grid>

                                <!--  Content for the menu text etc   文本  -->
                                <ContentPresenter x:Name="HeaderHost"
                                                  Grid.Column="2"
                                                  Margin="{TemplateBinding Padding}"
                                                  HorizontalAlignment="Right"
                                                  VerticalAlignment="Center"
                                                  ContentSource="Header"
                                                  RecognizesAccessKey="True"
                                                  TextBlock.Foreground="{DynamicResource TextColor}" />

                                <!--  子菜单  -->
                                <!--  ContentPresenter to show an Icon if needed  -->
                                <ContentPresenter x:Name="Icon"
                                                  Grid.Column="3"
                                                  Margin="4,0,6,0"
                                                  VerticalAlignment="Center"
                                                  ContentSource="Icon" />

                                <!--  Glyph is a checkmark if needed for a checkable menu   可选  -->
                                <Grid x:Name="GlyphPanel"
                                      Grid.Column="3"
                                      Margin="8,0,9,0"
                                      VerticalAlignment="Center"
                                      Visibility="Collapsed">
                                    <Path x:Name="GlyphPanelpath"
                                          VerticalAlignment="Center"
                                          Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z"
                                          Fill="{DynamicResource TextColor}"
                                          FlowDirection="RightToLeft"
                                          RenderTransformOrigin="0.5,0.5">
                                        <Path.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform ScaleX="-1.44" ScaleY="1.44" />
                                                <SkewTransform AngleX="0" AngleY="0" />
                                                <RotateTransform Angle="0" />
                                                <TranslateTransform />
                                            </TransformGroup>
                                        </Path.RenderTransform>
                                    </Path>
                                </Grid>

                            </Grid>
                        </Border>

                        <!--  These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role  -->
                        <ControlTemplate.Triggers>

                            <!--  Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down  -->
                            <Trigger Property="Role" Value="TopLevelHeader">
                                <Setter Property="Margin" Value="0,1,0,1" />
                                <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                                <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed" />
                                <Setter Property="Background" Value="Transparent" TargetName="MainGrid"/>
                            </Trigger>

                            <!--  Role = TopLevelItem :  this is a child menu item from the top level without any child items  -->
                            <Trigger Property="Role" Value="TopLevelItem">
                                <!--<Setter Property="Margin" Value="3" />-->
                                <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed" />
                                <Setter Property="Background" Value="Transparent" TargetName="MainGrid"/>
                            </Trigger>

                            <!--  Role = SubMenuHeader : this is a child menu item which does not have children  -->
                            <Trigger Property="Role" Value="SubmenuHeader">
                                <Setter Property="DockPanel.Dock" Value="Top" />
                                <Setter Property="Padding" Value="0,2,0,2" />
                                <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                                <Setter TargetName="SubMenuPopup" Property="Placement" Value="Right" />
                                <Setter TargetName="SubMenuPopup" Property="HorizontalOffset" Value="3" />
                                <Setter TargetName="CheckWidth" Property="Width" Value="25" />
                            </Trigger>

                            <!--  Role = SubMenuItem : this is a child menu item which has children  -->
                            <Trigger Property="Role" Value="SubmenuItem">
                                <Setter Property="DockPanel.Dock" Value="Top" />
                                <Setter Property="Padding" Value="0,2,0,2" />
                                <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed" />
                                <Setter TargetName="CheckWidth" Property="Width" Value="25" />
                            </Trigger>


                            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                                <Setter TargetName="SubMenuPopup" Property="PopupAnimation" Value="None" />
                            </Trigger>

                            <!--  If no Icon is present the we collapse the Icon Content  -->
                            <Trigger Property="Icon" Value="{x:Null}">
                                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                            </Trigger>

                            <!--  The GlyphPanel contains the CheckMark  -->
                            <Trigger Property="IsChecked" Value="true">
                                <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                            </Trigger>

                            <Trigger SourceName="SubMenuPopup" Property="AllowsTransparency" Value="true">
                                <Setter TargetName="SubMenu" Property="Margin" Value="3,3,0,0" />
                                <Setter TargetName="SubMenu" Property="SnapsToDevicePixels" Value="true" />

                            </Trigger>

                            <Trigger Property="IsMouseOver" Value="true">
                                <!--<Setter TargetName="SubMenuPopup" Property="IsOpen" Value="true" />-->
                            </Trigger>

                            <!--  Using the system colors for the Menu Highlight and IsEnabled  -->
                            <Trigger Property="IsHighlighted" Value="true">
                                <Setter TargetName="GlyphPanelpath" Property="Fill" Value="{DynamicResource MainColor}" />
                                <Setter TargetName="ArrowPanelPath" Property="Fill" Value="{DynamicResource MainColor}" />
                                <Setter TargetName="HeaderHost" Property="TextBlock.Foreground" Value="{DynamicResource MainColor}" />
                                <Setter TargetName="Border" Property="Opacity" Value="0.7" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="white" />
                                <Setter TargetName="Border" Property="Background" Value="white" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" Value="0.5" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style TargetType="{x:Type ContextMenu}">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Grid.IsSharedSizeScope" Value="True" />
            <Setter Property="HasDropShadow" Value="True" />
            <Setter Property="TextBlock.FontSize" Value="15" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Border BorderBrush="Black" BorderThickness="1">
                            <Grid x:Name="SubMenu">
                                <Border x:Name="SubMenuBorder"
                                        Background="{DynamicResource MainColor}"
                                        BorderBrush="Black"
                                        BorderThickness="1">
                                    <!--<Border.Effect>
                                        <DropShadowEffect Opacity="0.5" />
                                    </Border.Effect>-->
                                </Border>

                                <!--  StackPanel holds children of the menu. This is set bu IsItemsHost=True  -->
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style TargetType="{x:Type TextBox}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
            <Setter Property="BorderBrush" Value="LightGray" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Padding" Value="1" />
            <Setter Property="AllowDrop" Value="true" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border x:Name="Bd"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="true">
                            <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                            <Trigger Property="IsFocused" Value="true">
                                <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource MainColor}" />
                                <Setter TargetName="Bd" Property="BorderThickness" Value="1" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="SeparatorStyle1" TargetType="{x:Type Separator}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Separator}">
                        <Grid Margin="0,1,0,1" SnapsToDevicePixels="true">
                            <Rectangle Height="1"
                                       Margin="0,0,1,1"
                                       Fill="#E0E0E0" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>




    </Application.Resources>
</Application>